{# this is for an ERB leaf, covering ex4400 and qfx5120 to start #}
{# template for ipv6 evpn underlay, starting lab build #}
{# summarized list here, remove inline... #}
{# for border role, add L3 sub interface support on phy int and ae #}
{# need to add firewall section here, maybe include separate j2 #}
{# need to add prefix-lists for firewall policy-options #}
{# need to add all of the inter-vlan multicast oism config #}
{# 
{%- include 'inc_re_protect_v4.j2' +%}
{%- include 'inc_re_protect_v6.j2' +%}
#}
system {
    host-name {{ USERINPUT['hostname'] }};
    auto-snapshot;
    time-zone {{ GLOBAL['timezone'] }};
    root-authentication {
        encrypted-password "{{ CREDS['root'] }}";
    }
    commit {
        synchronize;
        no-delta-synchronize;
    }
    login {
        message "{{ GLOBAL['loginmsg'] }}";
        retry-options {
            tries-before-disconnect 3;
            backoff-threshold 1;
            backoff-factor 6;
            minimum-time 30;
        }
        class SUPER-USER-REMOTE {
            idle-timeout 10;
            permissions all;
        }
        user remote {
            full-name AAA-Null-User;
            uid 9999;
            class SUPER-USER-REMOTE;
        }
{% for USER in CREDS['users'] %}
        user {{ USER['name'] }} {
            uid {{ USER['uid'] }};
            class {{ USER['class'] }};
            authentication {
{% for AUTH in USER['auth'] %}
                {{ AUTH['authtype'] }} "{{ AUTH['authvalue'] }}";
{% endfor %}
            }
        }
{% endfor %}
    }
    services {
        ssh {
            root-login {{ GLOBAL['root-login'] }};
            protocol-version v2;
            connection-limit {{ GLOBAL['ssh-connection-limit'] }};
            rate-limit {{ GLOBAL['ssh-rate-limit'] }};
        }
        netconf {
            ssh {
                connection-limit {{ GLOBAL['nc-connection-limit'] }};
                rate-limit {{ GLOBAL['nc-rate-limit'] }};
            }
            rfc-compliant;
            yang-compliant;
        }
    }
    internet-options {
        tcp-drop-synfin-set;
    }
    authentication-order password;
    ports {
        console log-out-on-disconnect;
        auxiliary {
            disable;
            insecure;
        }
    }
    syslog {
        user * {
            any emergency;
        }
{% for syslog in GLOBAL['syslog']%}
        host {{ syslog }} {
            any notice;
            authorization any;
            firewall any;
            interactive-commands any;
            structured-data;
        }
{% endfor %}
        file messages {
            any any;
            authorization info;
        }
        file interactive-commands {
            interactive-commands any;
        }
    }
    name-server {
{% for d in GLOBAL['dns']%}
        {{ d }};
{% endfor %}
    }
    ntp {
{% for NTP in GLOBAL['ntp'] %}
        server {{ NTP }};
{% endfor %}
    }
}
chassis {
    aggregated-devices {
        ethernet {
            device-count {{ USERINPUT['ae-count'] }};
        }
    }
{% if GLOBAL['gbp-enabled'] %}
    forwarding-options {
        vxlan-gbp-profile;
    }
{% endif %}
}
interfaces {
{% for INTS in USERINPUT['uplinks'] %}{# begin uplinks #}
    {{ INTS['int'] }} {
        description "EVPN_UPLINK: {{ INTS['description'] }}";
{% if INTS['vlan-tagging'] == True %}
        vlan-tagging;
{% endif %}
        mtu {{ INTS['mtu'] }};
{% for UNITS in INTS['unit'] %}
        unit {{ UNITS['id'] }} {
{% if INTS['vlan-tagging'] == True %}
            vlan-id {{ UNITS['vlan-id'] }};
{% endif %}
            family inet {
                address {{ UNITS['addr-v4'] }}/{{ UNITS['bitmask'] }};
            }
{% if not UNITS['addr-v6'] == False %}
            family inet6 {
                address {{ UNITS['addr-v6'] }}/{{ UNITS['v6-bitmask'] }};
            }
{% endif %}
        }
{% endfor %}
    }
{% endfor %} {# end uplinks #}
{# need to add regular interface config here #}
{% if USERINPUT['local-ints'] is defined %}
{% for INTS in USERINPUT['local-ints'] %}
    {{ INTS['int'] }} {
        description "{{ INTS['desc'] }}";
{% if INTS['mtu'] %}
        mtu {{ INTS['mtu'] }};
{% endif %}
        unit 0 {
            family ethernet-switching {
                interface-mode {{ INTS['int-mode'] }};
                vlan {
                    members {{ INTS['vlanlist'] }};
                }
            }
        }
    }
{% endfor %}{% endif %}
{# need to add ae member and ae logical ints here #}
{% if USERINPUT['ae-members'] is defined %}
{% for INTS in USERINPUT['ae-members'] %}
    {{ INTS['int'] }} {
        description "{{ INTS['desc'] }}";
        ether-options {
            802.3ad ae{{ INTS['ae-id'] }};
        }
    }
{% endfor %}
{% endif %}
{% if USERINPUT['ae-ints'] is defined %}
{% for INTS in USERINPUT['ae-ints'] %}
    ae{{ INTS['int'] }} {
        description "{{ INTS['desc'] }}";
{% if INTS['mtu'] %}
        mtu {{ INTS['mtu'] }};
{% endif %}{% if INTS['esi'] %}
        esi {
            00:{{ '%02x' | format(USERINPUT['leaf-pair']) }}:{{ '%02x' | format(INTS['int']) }}:00:00:00:00:00:00:00;
            all-active;
        }
{% endif %}
        aggregated-ether-options {
            lacp {
                active;
                system-id 00:00:5e:e4:31:57;
            }
        }
        unit 0 {
            family ethernet-switching {
                interface-mode {{ INTS['int-mode'] }};
                vlan {
                    members {{ INTS['vlanlist'] }};
                }
            }
        }
    }
{% endfor %}{% endif %}
{# need to add storm-control to interfaces #}
    vme {
        unit 0 {
            family inet {
                address {{ USERINPUT['mgmt-addr'] }}/{{ USERINPUT['bitmask'] }};
            }
        }
    }
{# removing IRB for the border leaf for now
{% if USERINPUT['datavlans'] is defined %}
    irb {
{% for IRB in USERINPUT['datavlans'] %}{% if IRB['l3-enabled'] == True %}
        unit {{ IRB['id'] }} {
            description "{{ IRB['description'] }}";
            family inet {
                address {{ IRB['ip-prefix'] }}.{{ IRB['irb-hostbit'] }}/{{ IRB['bitmask'] }};
            }
{% if not IRB['ip6-prefix'] == False %}
            family inet6 {
                address {{ IRB['ip6-prefix'] }}{{ IRB['irb-hostbit'] }}/{{ IRB['ip6-bitmask'] }};
                address {{ IRB['ip6-ll'] }}{{ IRB['irb-hostbit'] }}/64;
            }
{% endif %}
            mac {{ IRB['any-mac'] }};
        }
{% endif %}{% endfor %}{% endif %}   end of comment for IRB #}
    lo0 {
{% for LOOP in USERINPUT['loopbacks'] %}
        unit {{ LOOP['id'] }} {
            family inet {
{% if not LOOP['filter-v4'] == False and not GLOBAL['IPv4-lo0-filter'] == False %}
                filter {
                    input {{ LOOP['filter-v4'] }};
                }
{% endif %}
                address {{ LOOP['addr-v4'] }}/32;
            }
{% if not LOOP['addr-v6'] == False %}
            family inet6 {
{% if not LOOP['filter-v6'] == False and not GLOBAL['IPv6-lo0-filter'] == False %}
                filter {
                    input {{ LOOP['filter-v6'] }};
                }
{% endif %}
                address {{ LOOP['addr-v6'] }}/128;
            }
{% endif %}
        }
{% endfor %}
    }
}
{% include 'inc_snmp.j2' +%}
{# is forwarding-options vxlan shared tunnels needed, overlay-ecmp? #}
forwarding-options {
    storm-control-profiles default {
        all;
    }
    evpn-vxlan {
        shared-tunnels;
    }
    vxlan-routing {
        overlay-ecmp;
    }
}
routing-options {
    static {
{% for SR in GLOBAL['staticroutes'] %}
        route {{ SR }} next-hop {{ USERINPUT['defgw'] }};
{% endfor %}
    }
    router-id{% for LOOP in USERINPUT['loopbacks'] %}{% if LOOP['id'] == 0 %} {{ LOOP['addr-v4'] }}{% endif %}{% endfor %};
    authonomous-system {{ USERINPUT['local-as'] }};
    forwarding-table {
        export PFE-LB;
        ecmp-fast-reroute;
        chained-composite-next-hop {
            ingress {
                evpn;
            }
        }
    }
}
protocols {
    igmp {
        interface all {
            version 3;
        }
    }
    mld {
        interface all {
            version 2;
        }
    }
    rstp {
        interface all;
        bpdu-block-on-edge;
    }
{% if GLOBAL['IPv6-RA'] == True %}{# need to configure RA guard #}
    router-advertisement {
{% for IRB in USERINPUT['datavlans'] %}{% if IRB['l3-enabled'] == True %}{% if not IRB['ip6-prefix'] == False %}
        interface irb.{{ IRB['id'] }} {
            prefix {{ IRB['ip6-prefix'] }}/{{ IRB['ip6-bitmask'] }};
        }
{% endif %}{% endif %}{% endfor %}
    }
{% endif %}
    lldp {
        port-id-subtype interface-name;
        neighbour-port-info-display port-id;
        interface all;
    }
    lldp-med {
        interface all;
    }
    bgp {
        group EVPN-UNDERLAY {
            type external;
            connect-retry-interval {{ GLOBAL['connect-retry-interval'] }};
            mtu-discovery;
            log-updown;
            family inet6 {
                unicast;
            }
            authentication-key "{{ CREDS['bgpkey'] }}"
            export UNDERLAY-BGP-OUT;
            local-as {{ USERINPUT['local-as'] }};
            graceful-restart {
                disable;
            }
            multipath {
                multiple-as;
            }
            bfd-liveness-detection {
                minimum-interval 1000;
                multiplier 3;
            }
{% for NEIG in USERINPUT['bgp-neigh'] %}{% if not NEIG['ubgp-ip'] == False %}
            neighbor {{ NEIG['ubgp-ip'] }} {
                description {{ NEIG['desc'] }};
                peer-as {{ NEIG['peer-as'] }};
            }
{% endif %}{% endfor %}
        }
        group EVPN-OVERLAY {
            type external;
            multihop {
                ttl 1;
                no-nexthop-change;
            }
            connect-retry-interval {{ GLOBAL['connect-retry-interval'] }};			
            local-address{% for LOOP in USERINPUT['loopbacks'] %}{% if LOOP['id'] == 0 %} {{ LOOP['addr-v6'] }}{% endif %}{% endfor %};
            mtu-discovery;
            log-updown;
            family evpn {
                signaling{
                    loops 2;
                }
            }
            authentication-key "{{ CREDS['bgpkey'] }}"
            local-as {{ USERINPUT['local-as'] }};
            graceful-restart {
                disable;
			}
            multipath{
                multiple-as;
            }
            bfd-liveness-detection {
                minimum-interval 1000;
                multiplier 3;
                session-mode automatic;
            }
{% for NEIG in USERINPUT['bgp-neigh'] %}{% if not NEIG['obgp-ip'] == False %}
            neighbor {{ NEIG['obgp-ip'] }} {
                description {{ NEIG['desc'] }};
                peer-as {{ NEIG['peer-as'] }};
                }
            }
{% endif %}{% endfor %}
        }
    }
}
{# need to add firewall section here, maybe include separate j2 #}
{# need to add prefix-lists for firewall policy-options #}
policy-options {
{% include 'inc_re_protect_prefix_lists.j2' +%}
    policy-statement PFE-LB {
        then {
            load-balance per-packet;
        }
    }
    policy-statement UNDERLAY-BGP-OUT {
        term ADVERTISE {
            from {
                protocol direct;
                route-filter{% for LOOP in USERINPUT['loopbacks'] %}{% if LOOP['id'] == 0 %} {{ LOOP['addr-v4'] }}{% endif %}{% endfor %}/32 exact;
                route-filter{% for LOOP in USERINPUT['loopbacks'] %}{% if LOOP['id'] == 0 %} {{ LOOP['addr-v6'] }}{% endif %}{% endfor %}/128 exact;
            }
            then accept;
        }
    }
    policy-statement EXPORT-T5 {
        term direct {
            from protocol direct;
            then accept;
        }
    }
}
{# add routing-instances here, evpn mac-vrf and l3vrf for campus irb #}
routing-instances {
    evpn_vs {
        instance-type mac-vrf;
        protocols {
            evpn {
                encapsulation vxlan;
                default-gateway do-not-advertise;
                extended-vni-list all;
            }
            rstp {
{% for INT in USERINPUT['local-ints'] %}{% if INT['macvrf'] == "evpn_vs" %}
                interface {{ INT['int'] }} edge;
{% endif %}{% endfor %}
                interface all;
                bpdu-block-on-edge;
            }
        }
        vtep-source-interface lo0.0 inet6;
        service-type vlan-aware;
{% for INT in USERINPUT['local-ints'] %}{% if INT['macvrf'] == "evpn_vs" %}
        interface {{ INT['int'] }};
{% endif %}{% endfor %}
        route-distinguisher {% for LOOP in USERINPUT['loopbacks'] %}{% if LOOP['id'] == 0 %} {{ LOOP['addr-v4'] }}{% endif %}{% endfor %}:1;
        vrf-target target:{{ GLOBAL['overlay-rt']}}:1;
        vlans {
            default {
                vlan-id 1;
            }
{% if USERINPUT['datavlans'] is defined %}{% for VNI in USERINPUT['datavlans'] %}
            VLAN{{ VNI['id'] }} {
                description "{{ VNI['description'] }}";
                vlan-id {{ VNI['id'] }};
{% if VNI['l3-enabled'] == True %}
                l3-interface irb.{{ VNI['id'] }};
{% endif %}
                vxlan {
                    vni {{ VNI['vni'] }};
                }
            }
{% endfor %}{% endif %}
{% for VNI in GLOBAL['datavlans'] %}{% if VNI['l3-enabled'] == False %}
            VLAN{{ VNI['id'] }} {
                description "{{ VNI['description'] }}";
                vlan-id {{ VNI['id'] }};
                vxlan {
                    vni {{ VNI['vni'] }};
                }
            }
{% endif %}{% endfor %}
        }
    }
{% for RI in GLOBAL['l3vrf'] %}
    {{ RI['name']|upper }} {
        instance-type vrf;
        routing-options {
            multipath;
            auto-export;
        }
        protocols {
            evpn {
                ip-prefix-routes {
                    advertise direct-nexthop;
                    encapsulation vxlan;
                    vni {{ RI['t5vni'] }};
                    export EXPORT-T5;
                }
            }
        }
        interface lo0.{% for LO in USERINPUT['loopbacks'] %}{% if LO['vrf'] == RI['name'] %}{{ LO['id'] }}{% endif %}{% endfor %};
        route-distinguisher{% for LOOP in USERINPUT['loopbacks'] %}{% if LOOP['id'] == 0 %} {{ LOOP['addr-v4'] }}{% endif %}{% endfor %}:{{ RI['id'] }};
        vrf-target target:{{ GLOBAL['overlay-rt']}}:{{ RI['id'] }};
        vrf-table-label;
}
{% endfor %}
